// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Test$LearnReasonmlWorkshop = require("../../support/test.bs.js");

function mapOption(f, opt) {
  if (opt !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(opt)));
  }
  
}

function $$double(i) {
  return (i << 1);
}

if (mapOption($$double, undefined) !== undefined) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "anonymousFunctions.re",
          38,
          9
        ]
      ];
}

if (!Caml_obj.caml_equal(mapOption($$double, 2), 4)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "anonymousFunctions.re",
          40,
          9
        ]
      ];
}

if (!Caml_obj.caml_equal(mapOption((function (i) {
              return (i << 1);
            }), 2), 4)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "anonymousFunctions.re",
          46,
          9
        ]
      ];
}

function applyIfNonzero(f, i) {
  return Pervasives.failwith("For you to implement");
}

Test$LearnReasonmlWorkshop.runAll(/* :: */[
      /* tuple */[
        Pervasives.failwith("For you to implement") === 0,
        "apply if non-zero"
      ],
      /* :: */[
        /* tuple */[
          Pervasives.failwith("For you to implement") === 2,
          "apply if non-zero"
        ],
        /* [] */0
      ]
    ]);

exports.applyIfNonzero = applyIfNonzero;
/*  Not a pure module */
