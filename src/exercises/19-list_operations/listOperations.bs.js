// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Test$LearnReasonmlWorkshop = require("../../support/test.bs.js");

var myInts = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* [] */0
        ]
      ]
    ]
  ]
];

function doubleMyInts(ints) {
  return List.map((function (x) {
                return (x << 1);
              }), ints);
}

if (!Caml_obj.caml_equal(doubleMyInts(myInts), /* :: */[
        2,
        /* :: */[
          4,
          /* :: */[
            6,
            /* :: */[
              8,
              /* :: */[
                10,
                /* [] */0
              ]
            ]
          ]
        ]
      ])) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "listOperations.re",
          33,
          9
        ]
      ];
}

if (!Caml_obj.caml_equal(List.map((function (prim) {
              return String(prim);
            }), myInts), /* :: */[
        "1",
        /* :: */[
          "2",
          /* :: */[
            "3",
            /* :: */[
              "4",
              /* :: */[
                "5",
                /* [] */0
              ]
            ]
          ]
        ]
      ])) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "listOperations.re",
          37,
          9
        ]
      ];
}

function myNewInts(ints) {
  return Pervasives.failwith("For you to implement");
}

List.iter((function (i) {
        console.log("here's an int: " + i);
        
      }), List.map((function (prim) {
            return String(prim);
          }), myInts));

function sumOfMyInts(ints) {
  return List.fold_left((function (total, myInt) {
                return total + myInt | 0;
              }), 0, ints);
}

if (sumOfMyInts(myInts) !== 15) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "listOperations.re",
          71,
          9
        ]
      ];
}

function numEvenInts(ints) {
  return Pervasives.failwith("For you to implement");
}

function firstNumGreaterThan3(ints) {
  return List.find((function (x) {
                return x > 3;
              }), ints);
}

if (firstNumGreaterThan3(myInts) !== 4) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "listOperations.re",
          89,
          9
        ]
      ];
}

Test$LearnReasonmlWorkshop.runAll(/* :: */[
      /* tuple */[
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* :: */[
                    5,
                    /* :: */[
                      6,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]),
        "my new ints"
      ],
      /* :: */[
        /* tuple */[
          Pervasives.failwith("For you to implement") === 2,
          "num even ints"
        ],
        /* [] */0
      ]
    ]);

exports.myNewInts = myNewInts;
exports.numEvenInts = numEvenInts;
/*  Not a pure module */
